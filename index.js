import dotenv from 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import axios from 'axios';
import express from 'express';
import bodyParser from 'body-parser';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
app.use(bodyParser.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true});
const TELEGRAM_CHANNEL = '@avogadro_school';
const VK_GROUP_ID = process.env.VK_GROUP_ID;
const VK_API_TOKEN = process.env.VK_TOKEN;
const VK_API_VERSION = '5.131';
const ADMIN_ID = process.env.ADMIN_ID;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
let db;
async function initializeDatabase() {
  return open({
    filename: './database.sqlite',
    driver: sqlite3.Database
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    db = await initializeDatabase();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await db.exec(`CREATE TABLE IF NOT EXISTS students (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT,
      phone TEXT,
      email TEXT,
      course_name TEXT,
      format TEXT,
      telega_id INTEGER,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )`);
    
    await db.exec(`CREATE TABLE IF NOT EXISTS applications (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      fullName TEXT NOT NULL,
      phone TEXT NOT NULL,
      email TEXT NOT NULL,
      course TEXT NOT NULL,
      format TEXT NOT NULL,
      createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
    setupBotHandlers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Ä–æ—É—Ç–æ–≤
    setupApiRoutes();
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const PORT = process.env.PORT || 5000;
    const server = app.listen(PORT, () => {
      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    process.on('SIGINT', async () => {
      try {
        await db.close();
        server.close(() => {
          console.log('–°–µ—Ä–≤–µ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã');
          process.exit(0);
        });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', err);
        process.exit(1);
      }
    });

    return { app, db };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –±–æ—Ç–∞
function setupBotHandlers() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(
      chatId,
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üëã\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —à–∫–æ–ª–µ ¬´–ê–≤–æ–≥–∞–¥—Ä–æ¬ª üß™üôÇ\n–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥—É–º—ã–≤–∞–µ—Ç–µ ü§î, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞—è–≤–∫—É üìã. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã üí¨ –∏ –ø–æ–º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ! ‚ú®',
      {
        reply_markup: {
          keyboard: [
            [{
              text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É',
              web_app: {url: 'https://avogadro-online-school.netlify.app'}
            }]
          ],
          resize_keyboard: true
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_post
  bot.onText(/\/send_post/, async (msg) => {
    const chatId = msg.chat.id;
    
    if (parseInt(chatId) !== parseInt(ADMIN_ID)) {
      return bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }
    
    const waitingMsg = await bot.sendMessage(
      chatId,
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º):',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_post' }]
          ]
        }
      }
    );
    
    const mediaHandler = async (msg) => {
      try {
        await bot.deleteMessage(chatId, waitingMsg.message_id);
        
        let postText = msg.caption || msg.text || '';
        let photoId = null;

        if (msg.photo) {
          photoId = msg.photo[msg.photo.length - 1].file_id;
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∫–∞–Ω–∞–ª
        if (photoId) {
          await bot.sendPhoto(
            TELEGRAM_CHANNEL,
            photoId,
            {
              caption: postText,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üì≤ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', url: `https://t.me/avogadro_online_school_bot` },
                    { text: 'üåê –ú—ã –≤ VK', url: 'https://vk.com/avogadro_school' }
                  ]
                ]
              }
            }
          );
        } else {
          await bot.sendMessage(
            TELEGRAM_CHANNEL,
            postText,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üì≤ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', url: `https://t.me/avogadro_online_school_bot` },
                    { text: 'üåê –ú—ã –≤ VK', url: 'https://vk.com/avogadro_school' }
                  ]
                ]
              }
            }
          );
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ VK
        if (photoId) {
          const fileLink = await bot.getFileLink(photoId);
          await postToVK(postText, fileLink);
        } else {
          await postToVK(postText);
        }

        await bot.sendMessage(chatId, '‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram –∏ VK!');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error);
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      } finally {
        bot.removeListener('message', mediaHandler);
        bot.removeListener('photo', mediaHandler);
      }
    };

    bot.once('message', mediaHandler);
    bot.once('photo', mediaHandler);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ web_app_data
  bot.on('message', async (msg) => {
    if (msg.web_app_data) {
      const chatId = msg.chat.id;
      let application = Object.values(JSON.parse(msg.web_app_data.data));
      let phone;
      let application_list = application.map(
        (i, index) => {
          if(index === 1) {
            if (typeof i === 'string' && i.startsWith('8')) {
              i = '+7' + i.slice(1);
              phone = i;
            }
          }
          return i + '\n';
        }
      );
      let application_str = application_list.join("");
      
      try {
        await db.run(
          "INSERT INTO students (username, phone, email, course_name, format, telega_id) VALUES (?, ?, ?, ?, ?, ?)", 
          [...application_list, chatId]
        );
      } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:", error);
      }
      
      await bot.sendMessage(
        chatId,
        "üí• –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –∑–∞—è–≤–∫—É! üí•\n–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n–ñ–µ–ª–∞–µ–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üòäüåû",
        {
          reply_markup: {
            keyboard: [
              [{
                text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É',
                web_app: {url: 'https://avogadro-online-school.netlify.app'}
              }]
            ],
            resize_keyboard: true
          }
        }
      );
      
      setTimeout(async () => {
        await bot.sendMessage(ADMIN_ID, `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n${application_str}`);
      }, 1000);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
  bot.on('callback_query', async (query) => {
    if (query.data === 'cancel_post') {
      await bot.answerCallbackQuery(query.id);
      await bot.deleteMessage(query.message.chat.id, query.message.message_id);
      await bot.sendMessage(query.message.chat.id, '‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    }
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API —Ä–æ—É—Ç–æ–≤
function setupApiRoutes() {
  // –†–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
  app.post('/api/applications', async (req, res) => {
    try {
      const { fullName, phone, email, course, format } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!fullName || !phone || !email || !course || !format) {
        return res.status(400).json({
          success: false,
          message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneRegex = /^(\+7|8)[\s-]?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}$/;
      if (!phoneRegex.test(phone)) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä'
        });
      }

      // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
      const result = await db.run(
        `INSERT INTO applications (fullName, phone, email, course, format) 
         VALUES (?, ?, ?, ?, ?)`,
        [fullName, phone, email, course, format]
      );

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
      const newApplication = await db.get(
        `SELECT * FROM applications WHERE id = ?`,
        [result.lastID]
      );

      res.status(201).json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
        data: newApplication
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
      res.status(500).json({
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏'
      });
    }
  });

  // –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
  app.get('/api/applications', async (req, res) => {
    try {
      const applications = await db.all(
        `SELECT * FROM applications ORDER BY createdAt DESC`
      );
      res.json({
        success: true,
        data: applications
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫'
      });
    }
  });

  // –†–æ—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  app.delete('/api/applications', async (req, res) => {
    try {
      const result = await db.run(`DELETE FROM applications`);
      res.json({
        success: true,
        message: `–£–¥–∞–ª–µ–Ω–æ ${result.changes} –∑–∞—è–≤–æ–∫`
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫'
      });
    }
  });

  // –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ VK
  app.get('/api/vk/posts', async (req, res) => {
    try {
      const count = req.query.count || 10;
      
      const response = await axios.get('https://api.vk.com/method/wall.get', {
        params: {
          owner_id: `-${VK_GROUP_ID}`,
          count,
          access_token: VK_API_TOKEN,
          v: VK_API_VERSION,
        },
      });

      const posts = response.data.response.items;
      res.json({ success: true, posts});
    } catch (error) {
      console.error('VK API Error:', error.response?.data || error.message);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ VK' 
      });
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ VK
async function postToVK(text, photoUrl = null) {
  try {
    let params = {
      owner_id: -Math.abs(VK_GROUP_ID),
      message: text + `\n\n–ù–∞—à –±–æ—Ç: https://t.me/${bot.options.username}`,
      access_token: VK_API_TOKEN,
      v: VK_API_VERSION
    };

    if (photoUrl) {
      try {
        // 1. –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const serverResponse = await axios.get('https://api.vk.com/method/photos.getWallUploadServer', {
          params: {
            group_id: Math.abs(VK_GROUP_ID),
            access_token: VK_API_TOKEN,
            v: VK_API_VERSION
          }
        });

        if (!serverResponse.data?.response?.upload_url) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –æ—Ç VK API');
        }

        const uploadUrl = serverResponse.data.response.upload_url;

        // 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å Telegram —Å–µ—Ä–≤–µ—Ä–∞
        const photoResponse = await axios.get(photoUrl, { responseType: 'arraybuffer' });
        
        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK
        const formData = new FormData();
        formData.append('photo', photoResponse.data, { filename: 'post_image.jpg' });

        const uploadResponse = await axios.post(uploadUrl, formData, {
          headers: formData.getHeaders()
        });

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ
        const saveResponse = await axios.get('https://api.vk.com/method/photos.saveWallPhoto', {
          params: {
            group_id: Math.abs(VK_GROUP_ID),
            photo: uploadResponse.data.photo,
            server: uploadResponse.data.server,
            hash: uploadResponse.data.hash,
            access_token: VK_API_TOKEN,
            v: VK_API_VERSION
          }
        });

        if (!saveResponse.data?.response?.[0]?.id) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤ VK');
        }

        params.attachments = `photo${saveResponse.data.response[0].owner_id}_${saveResponse.data.response[0].id}`;
      } catch (uploadError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –≤ VK:', uploadError);
      }
    }

    // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç (—Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑)
    const response = await axios.get('https://api.vk.com/method/wall.post', {
      params: params
    });

    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK:', error.response?.data || error.message);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ VK');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initializeApp().catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
  process.exit(1);
});